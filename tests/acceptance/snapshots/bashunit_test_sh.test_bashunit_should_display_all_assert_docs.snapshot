## assert_true
--------------
> `assert_true bool|function|command`

Reports an error if the argument result in a truthy value: `true` or `0`.

- assert_false is similar but different.


## assert_false
--------------
> `assert_false bool|function|command`

Reports an error if the argument result in a falsy value: `false` or `1`.

- assert_true is similar but different.


## assert_same
--------------
> `assert_same "expected" "actual"`

Reports an error if the `expected` and `actual` are not the same - including special chars.

- assert_not_same is the inverse of this assertion and takes the same arguments.
- assert_equals is similar but ignoring the special chars.


## assert_equals
--------------
> `assert_equals "expected" "actual"`

Reports an error if the two variables `expected` and `actual` are not equal ignoring the special chars like ANSI Escape Sequences (colors) and other special chars like tabs and new lines.

- assert_same is similar but including special chars.


## assert_contains
--------------
> `assert_contains "needle" "haystack"`

Reports an error if `needle` is not a substring of `haystack`.

- assert_not_contains is the inverse of this assertion and takes the same arguments.


## assert_contains_ignore_case
--------------
> `assert_contains_ignore_case "needle" "haystack"`

Reports an error if `needle` is not a substring of `haystack`.
Differences in casing are ignored when needle is searched for in haystack.


## assert_empty
--------------
> `assert_empty "actual"`

Reports an error if `actual` is not empty.

- assert_not_empty is the inverse of this assertion and takes the same arguments.


## assert_matches
--------------
> `assert_matches "pattern" "value"`

Reports an error if `value` does not match the regular expression `pattern`.

- assert_not_matches is the inverse of this assertion and takes the same arguments.


## assert_string_starts_with
--------------
> `assert_string_starts_with "needle" "haystack"`

Reports an error if `haystack` does not starts with `needle`.

- assert_string_not_starts_with is the inverse of this assertion and takes the same arguments.


## assert_string_ends_with
--------------
> `assert_string_ends_with "needle" "haystack"`

Reports an error if `haystack` does not ends with `needle`.

- assert_string_not_ends_with is the inverse of this assertion and takes the same arguments.


## assert_line_count
--------------
> `assert_line_count "count" "haystack"`

Reports an error if `haystack` does not contain `count` lines.


## assert_less_than
--------------
> `assert_less_than "expected" "actual"`

Reports an error if `actual` is not less than `expected`.

- assert_greater_than is the inverse of this assertion and takes the same arguments.


## assert_less_or_equal_than
--------------
> `assert_less_or_equal_than "expected" "actual"`

Reports an error if `actual` is not less than or equal to `expected`.

- assert_greater_than is the inverse of this assertion and takes the same arguments.


## assert_greater_than
--------------
> `assert_greater_than "expected" "actual"`

Reports an error if `actual` is not greater than `expected`.

- assert_less_than is the inverse of this assertion and takes the same arguments.


## assert_greater_or_equal_than
--------------
> `assert_greater_or_equal_than "expected" "actual"`

Reports an error if `actual` is not greater than or equal to `expected`.

- assert_less_or_equal_than is the inverse of this assertion and takes the same arguments.


## assert_exit_code
--------------
> `assert_exit_code "expected" "callable"`

Reports an error if the exit code of `callable` is not equal to `expected`.

If `callable` is not provided, it takes the last executed command or function instead.

- assert_successful_code, assert_general_error and assert_command_not_found
are more semantic versions of this assertion, for which you don't need to specify an exit code.


## assert_array_contains
--------------
> `assert_array_contains "needle" "haystack"`

Reports an error if `needle` is not an element of `haystack`.

- assert_array_not_contains is the inverse of this assertion and takes the same arguments.


## assert_successful_code
--------------
> `assert_successful_code "callable"`

Reports an error if the exit code of `callable` is not successful (`0`).

If `callable` is not provided, it takes the last executed command or function instead.

- assert_exit_code is the full version of this assertion where you can specify the expected exit code.


## assert_general_error
--------------
> `assert_general_error "callable"`

Reports an error if the exit code of `callable` is not a general error (`1`).

If `callable` is not provided, it takes the last executed command or function instead.

- assert_exit_code is the full version of this assertion where you can specify the expected exit code.


## assert_command_not_found
--------------
> `assert_general_error "callable"`

Reports an error if `callable` exists.
In other words, if executing `callable` does not return a command not found exit code (`127`).

If `callable` is not provided, it takes the last executed command or function instead.

- assert_exit_code is the full version of this assertion where you can specify the expected exit code.


## assert_file_exists
--------------
> `assert_file_exists "file"`

Reports an error if `file` does not exists, or it is a directory.

- assert_file_not_exists is the inverse of this assertion and takes the same arguments.


## assert_file_contains
--------------
> `assert_file_contains "file" "search"`

Reports an error if `file` does not contains the search string.

- assert_file_not_contains is the inverse of this assertion and takes the same arguments.


## assert_is_file
--------------
> `assert_is_file "file"`

Reports an error if `file` is not a file.


## assert_is_file_empty
--------------
> `assert_is_file_empty "file"`

Reports an error if `file` is not empty.


## assert_directory_exists
--------------
> `assert_directory_exists "directory"`

Reports an error if `directory` does not exist.

- assert_directory_not_exists is the inverse of this assertion and takes the same arguments.


## assert_is_directory
--------------
> `assert_is_directory "directory"`

Reports an error if `directory` is not a directory.


## assert_is_directory_empty
--------------
> `assert_is_directory_empty "directory"`

Reports an error if `directory` is not an empty directory.

- assert_is_directory_not_empty is the inverse of this assertion and takes the same arguments.


## assert_is_directory_readable
--------------
> `assert_is_directory_readable "directory"`

Reports an error if `directory` is not a readable directory.

- assert_is_directory_not_readable is the inverse of this assertion and takes the same arguments.


## assert_is_directory_writable
--------------
> `assert_is_directory_writable "directory"`

Reports an error if `directory` is not a writable directory.

- assert_is_directory_not_writable is the inverse of this assertion and takes the same arguments.


## assert_files_equals
--------------
> `assert_files_equals "expected" "actual"`

Reports an error if `expected` and `actual` are not equals.

- assert_files_not_equals is the inverse of this assertion and takes the same arguments.


## assert_not_same
--------------
> `assert_not_same "expected" "actual"`

Reports an error if the two variables `expected` and `actual` are the same value.

- assert_same is the inverse of this assertion and takes the same arguments.


## assert_not_contains
--------------
> `assert_not_contains "needle" "haystack"`

Reports an error if `needle` is a substring of `haystack`.

- assert_contains is the inverse of this assertion and takes the same arguments.


## assert_string_not_starts_with
--------------
> `assert_string_not_starts_with "needle" "haystack"`

Reports an error if `haystack` does starts with `needle`.

- assert_string_starts_with is the inverse of this assertion and takes the same arguments.


## assert_string_not_ends_with
--------------
> `assert_string_not_ends_with "needle" "haystack"`

Reports an error if `haystack` does ends with `needle`.

- assert_string_ends_with is the inverse of this assertion and takes the same arguments.


## assert_not_empty
--------------
> `assert_not_empty "actual"`

Reports an error if `actual` is empty.

- assert_empty is the inverse of this assertion and takes the same arguments.


## assert_not_matches
--------------
> `assert_not_matches "pattern" "value"`

Reports an error if `value` matches the regular expression `pattern`.

- assert_matches is the inverse of this assertion and takes the same arguments.


## assert_array_not_contains
--------------
> `assert_array_not_contains "needle" "haystack"`

Reports an error if `needle` is an element of `haystack`.

- assert_array_contains is the inverse of this assertion and takes the same arguments.


## assert_file_not_exists
--------------
> `assert_file_not_exists "file"`

Reports an error if `file` does exists.

- assert_file_exists is the inverse of this assertion and takes the same arguments.


## assert_file_not_contains
--------------
> `assert_file_not_contains "file" "search"`

Reports an error if `file` contains the search string.

- assert_file_contains is the inverse of this assertion and takes the same arguments.


## assert_directory_not_exists
--------------
> `assert_directory_not_exists "directory"`

Reports an error if `directory` exists.

- assert_directory_exists is the inverse of this assertion and takes the same arguments.


## assert_is_directory_not_empty
--------------
> `assert_is_directory_not_empty "directory"`

Reports an error if `directory` is empty.

- assert_is_directory_empty is the inverse of this assertion and takes the same arguments.


## assert_is_directory_not_readable
--------------
> `assert_is_directory_not_readable "directory"`

Reports an error if `directory` is readable.

- assert_is_directory_readable is the inverse of this assertion and takes the same arguments.


## assert_is_directory_not_writable
--------------
> `assert_is_directory_not_writable "directory"`

Reports an error if `directory` is writable.

- assert_is_directory_writable is the inverse of this assertion and takes the same arguments.


## assert_files_not_equals
--------------
> `assert_files_not_equals "expected" "actual"`

Reports an error if `expected` and `actual` are not equals.

- assert_files_equals is the inverse of this assertion and takes the same arguments.


## fail
--------------
> `fail "failure message"`

Unambiguously reports an error message. Useful for reporting specific message
when testing situations not covered by any `assert_*` functions.
