#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2034
declare -r BASHUNIT_VERSION="0.20.0"

# shellcheck disable=SC2155
declare -r BASHUNIT_ROOT_DIR="$(dirname "${BASH_SOURCE[0]}")"
export BASHUNIT_ROOT_DIR

source "$BASHUNIT_ROOT_DIR/src/dev/debug.sh"
source "$BASHUNIT_ROOT_DIR/src/check_os.sh"
source "$BASHUNIT_ROOT_DIR/src/str.sh"
source "$BASHUNIT_ROOT_DIR/src/globals.sh"
source "$BASHUNIT_ROOT_DIR/src/dependencies.sh"
source "$BASHUNIT_ROOT_DIR/src/io.sh"
source "$BASHUNIT_ROOT_DIR/src/math.sh"
source "$BASHUNIT_ROOT_DIR/src/parallel.sh"
source "$BASHUNIT_ROOT_DIR/src/env.sh"
source "$BASHUNIT_ROOT_DIR/src/clock.sh"
source "$BASHUNIT_ROOT_DIR/src/state.sh"
source "$BASHUNIT_ROOT_DIR/src/colors.sh"
source "$BASHUNIT_ROOT_DIR/src/console_header.sh"
source "$BASHUNIT_ROOT_DIR/src/console_results.sh"
source "$BASHUNIT_ROOT_DIR/src/helpers.sh"
source "$BASHUNIT_ROOT_DIR/src/upgrade.sh"
source "$BASHUNIT_ROOT_DIR/src/assertions.sh"
source "$BASHUNIT_ROOT_DIR/src/reports.sh"
source "$BASHUNIT_ROOT_DIR/src/runner.sh"
source "$BASHUNIT_ROOT_DIR/src/bashunit.sh"
source "$BASHUNIT_ROOT_DIR/src/main.sh"

_ASSERT_FN=""
_FILTER=""
_RAW_ARGS=()
_ASSERT_FNS=()
_ASSERT_ARGS_LIST=()
_CURRENT_ASSERT_ARGS=()
_ASSERT_COUNT=0
_CURRENT_ASSERT_FN=""
_ARGS=()
_BENCH_MODE=false

check_os::init
clock::init

# Argument parsing
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -a|--assert)
        if [[ -n "$_CURRENT_ASSERT_FN" ]]; then
          _ASSERT_FNS+=("$_CURRENT_ASSERT_FN")
          joined="$(printf '%s\n' "${_CURRENT_ASSERT_ARGS[@]}")"
          _ASSERT_ARGS_LIST+=("$joined")
          _ASSERT_COUNT=$(( _ASSERT_COUNT + 1 ))
          _CURRENT_ASSERT_ARGS=()
        fi
        _CURRENT_ASSERT_FN="$2"
        shift
        ;;
    -f|--filter)
      _FILTER="$2"
      shift
      ;;
    -s|--simple)
      export BASHUNIT_SIMPLE_OUTPUT=true
      ;;
    --detailed)
      export BASHUNIT_SIMPLE_OUTPUT=false
      ;;
    --debug)
      OUTPUT_FILE="${2:-}"
      if [[ -n "$OUTPUT_FILE" ]]; then
        exec > "$OUTPUT_FILE" 2>&1
      fi
      set -x
      ;;
    -b|--bench)
      _BENCH_MODE=true
      export BASHUNIT_BENCH_MODE=true
      source "$BASHUNIT_ROOT_DIR/src/benchmark.sh"
      ;;
    -S|--stop-on-failure)
      export BASHUNIT_STOP_ON_FAILURE=true
      ;;
    -p|--parallel)
      export BASHUNIT_PARALLEL_RUN=true
      ;;
    --no-parallel)
      export BASHUNIT_PARALLEL_RUN=false
      ;;
    -e|--env|--boot)
      # shellcheck disable=SC1090
      source "$2"
      shift
      ;;
    -l|--log-junit)
      export BASHUNIT_LOG_JUNIT="$2"
      shift
      ;;
    -r|--report-html)
      export BASHUNIT_REPORT_HTML="$2"
      shift
      ;;
    -vvv|--verbose)
      export BASHUNIT_VERBOSE=true
      ;;
    -v|--version)
      console_header::print_version
      trap '' EXIT && exit 0
      ;;
    --upgrade)
      upgrade::upgrade
      trap '' EXIT && exit 0
      ;;
    -h|--help)
      console_header::print_help
      trap '' EXIT && exit 0
      ;;
    *)
      if [[ -n "$_CURRENT_ASSERT_FN" ]]; then
        _CURRENT_ASSERT_ARGS+=("$1")
      else
        _RAW_ARGS+=("$1")
      fi
      ;;
  esac
  shift
done
if [[ -n "$_CURRENT_ASSERT_FN" ]]; then
  _ASSERT_FNS+=("$_CURRENT_ASSERT_FN")
  joined="$(printf '%s\n' "${_CURRENT_ASSERT_ARGS[@]}")"
  _ASSERT_ARGS_LIST+=("$joined")
fi

# Expand positional arguments after all options have been processed
if [[ ${#_RAW_ARGS[@]} -gt 0 ]]; then
  pattern='*[tT]est.sh'
  [[ "$_BENCH_MODE" == true ]] && pattern='*[bB]ench.sh'
  for arg in "${_RAW_ARGS[@]}"; do
    while IFS= read -r file; do
      _ARGS+=("$file")
    done < <(helper::find_files_recursive "$arg" "$pattern")
  done
fi

# Optional bootstrap
# shellcheck disable=SC1090
[[ -f "${BASHUNIT_BOOTSTRAP:-}" ]] && source "$BASHUNIT_BOOTSTRAP"

set +eu

#################
# Main execution
#################
if [[ ${#_ASSERT_FNS[@]} -gt 0 ]]; then
  if [[ ${#_ASSERT_FNS[@]} -eq 1 ]]; then
    args=()
    while IFS= read -r line; do
      args+=("$line")
    done <<< "${_ASSERT_ARGS_LIST[0]}"
    main::exec_assert "${_ASSERT_FNS[0]}" "${args[@]}"
  else
    main::exec_assert_chain
  fi
elif [[ "$_BENCH_MODE" == true ]]; then
  main::exec_benchmarks "$_FILTER" "${_ARGS[@]}"
else
  main::exec_tests "$_FILTER" "${_ARGS[@]}"
fi
